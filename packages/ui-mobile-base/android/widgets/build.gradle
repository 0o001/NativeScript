import groovy.json.JsonSlurper //used to parse package.json
import groovy.json.JsonBuilder
import groovy.json.JsonOutput

def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')

apply plugin: 'com.android.library'

def computeCompileSdkVersion () {
    if(project.hasProperty("compileSdk")) {
        return compileSdk
    }
    else {
        return 30
    }
}

def computeBuildToolsVersion() {
    if(project.hasProperty("buildToolsVersion")) {
        return buildToolsVersion
    }
    else {
        return "30.0.0"
    }
}

def computeSupportVersion() {
    if(project.hasProperty("supportVersion")) {
        return supportVersion
    }
    else {
        return "28.0.0"
    }
}

def computeTargetSdkVersion() {
    if(project.hasProperty("targetSdk")) {
        return targetSdk
    }
    else {
        return 30
    }
}

def computeAndroidXExifInterfaceVersion() {
	if(project.hasProperty("androidXExifInterface")) {
		return androidXExifInterface
	}
	else {
		return "1.2.0"
	}
}

def computeAndroidXViewPagerVersion() {
	if(project.hasProperty("androidXViewPager")) {
		return androidxViewPager
	}
	else {
		return "1.0.0"
	}
}

def computeAndroidXFragmentVersion() {
	if(project.hasProperty("androidXFragment")) {
		return androidxFragment
	}
	else {
		return "1.2.5"
	}
}

def computeAndroidXTransitionVersion() {
	if(project.hasProperty("androidXTransition")) {
		return androidxTransition
	}
	else {
		return "1.3.1"
	}
}

android {
    compileSdkVersion computeCompileSdkVersion()
    buildToolsVersion computeBuildToolsVersion()

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion computeTargetSdkVersion()
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    if(project.hasProperty("useAndroidX")) {
        println 'Using android X'
        implementation 'androidx.viewpager2:viewpager2:' + computeAndroidXViewPagerVersion()
        implementation 'androidx.fragment:fragment:' + computeAndroidXFragmentVersion()
        implementation 'androidx.transition:transition:' + computeAndroidXTransitionVersion()
				implementation 'androidx.exifinterface:exifinterface:' + computeAndroidXExifInterfaceVersion()
    } else {
        println 'Using support library'
        implementation 'com.android.support:support-v4:' + computeSupportVersion()
    }
}

task cleanBuildDir (type: Delete) {
    delete "../build/"
}

task copyAar << {
    copy {
        from "build/outputs/aar/widgets-release.aar"
        into "../build/"
    }
}

assemble.dependsOn(cleanBuildDir)
copyAar.dependsOn(assemble)
build.dependsOn(copyAar)
